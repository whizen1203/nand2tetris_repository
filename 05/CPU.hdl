// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {  // "CPU" 칩을 정의

    IN  inM[16],         // RAM의 A 주소의 내용(M)을 입력으로 받는다.
        instruction[16], // 실행할 명령어
        reset;           // 프로그램을 재시작할 것인지(1), 계속 실행할 것인지(0)의 신호

    OUT outM[16],        // M 값의 출력
        writeM,          // M에 쓸 것인지의 플래그
        addressM[15],    // RAM 주소 (M의 주소)
        pc[15];          // 다음 명령어의 ROM 주소

    PARTS:
	
    // 명령어의 타입을 판별합니다 (A인지 C인지)
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    // C 명령어에서 A 레지스터로 전달할 것인지 결정
    And(a=Cinstruction, b=instruction[5], out=ALUtoA);  
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);
    
    // A 명령어이거나 C 명령어에서 A 레지스터로 전달하면 A 레지스터에 로드
    Or(a=Ainstruction, b=ALUtoA, out=loadA);   
    ARegister(in=Aregin, load=loadA, out=Aout);

    // a-bit에 따라 A 또는 M을 선택
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);  
    
    // D 레지스터에 ALU 결과를 로드할 것인지 결정
    And(a=Cinstruction, b=instruction[4], out=loadD);  
    DRegister(in=ALUout, load=loadD, out=Dout);   
    
    // ALU 연산을 수행
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);  

    // 메모리 쓰기를 위한 출력 설정
    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=Cinstruction, b=instruction[3], out=writeM);
    
    // PC (Program Counter)를 로드하거나 증가시킬 것인지 결정
    And(a=ZRout, b=instruction[1], out=jeq);  
    And(a=NGout, b=instruction[2], out=jlt);  
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);            
    And(a=positive, b=instruction[0], out=jgt); 
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);              
    And(a=Cinstruction, b=jumpToA, out=PCload); 
    Not(in=PCload, out=PCinc);                  
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}